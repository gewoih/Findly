@page "/geolocation"

@using System.Text.Json.Nodes;
@using FindlyApp.Services;
@using System.Security.Claims;

@inject IJSRuntime _jsRuntime;
@inject GeolocationService _geolocationService;
@inject IHttpContextAccessor _httpContextAccessor;
@inject NavigationManager _navigationManager;

@implements IDisposable;

<h3>Geolocation</h3>

<div>
	Your coordinates:
	<ul>
        <li>Latitude: @_geolocationService._currentLatitude</li>
        <li>Longitude: @_geolocationService._currentLongitude</li>
	</ul>
	
</div>

	<div id="map"></div>

@code 
{
	private Guid _currentUserId;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		var userClaim = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier);
		if (userClaim is null)
		{
			_navigationManager.NavigateTo("/login", true);
		}
		else
		{
			_currentUserId = Guid.Parse(userClaim.Value);
			_geolocationService.OnGeolocationChanged += GeolocationService_OnGeolocationChanged;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_geolocationService.StartUpdatingUserGeolocation(_currentUserId, _jsRuntime);

			while (_geolocationService._currentLatitude == 0 && _geolocationService._currentLongitude == 0)
			{
				await Task.Delay(1);
			}
			
			await _jsRuntime.InvokeVoidAsync("drawMap", _geolocationService._currentLatitude, _geolocationService._currentLongitude);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task GeolocationService_OnGeolocationChanged(double newLatitude, double newLongitude)
	{
		await InvokeAsync(StateHasChanged);

		await _jsRuntime.InvokeVoidAsync("changeGeolocation", newLatitude, newLongitude);
	}

	public void Dispose()
	{
		_geolocationService.Dispose();
	}
}